TASK 1:
def calculate_distance_with_ignored_forces(force, time=1.0):
    
    mass = 1750 #The mass of the car was given as 1750kg.
    acceleration = force / mass #F=ma (Force = mass x acceleration) formula
    distance = 0.5 * acceleration * (time ** 2) #Calclating distance using the kinematic equation.

    return distance #Returns distance travelled in metres
---------------------------------------------------------------
TASK2:
def calculated_distance_with_forces(engine_force, #Engine froce in Newtons (N)
                                     time = 1.0, #Defaulting the time duration to 1 second
                                     mass = 1750, #Mass of the car in kg
                                     rolling_resistance_coefficient = 0.02, #Rolling friction coefficient
                                     air_density = 1.225,
                                     drag_coefficient = 0.3,
                                     frontal_area_of_the_car = 2.3):
    
    gravity = 9.81 #Gravitational acceleration
    time_step_seconds= 0.01 #Time step for numerical integration
    velocity = 0.0
    distance = 0.0
    
    for _ in range (int(time / dt)):
        #Calculating the opposing forces:
        f_friction = rolling_resistance_coefficient * mass * g
        
        air_drag = 0.5 * air_density * drag_coefficient * frontal_area_of_the_car * (velocity ** 2)

        #Net force determines acceleration
        net_force = engine_force - f_friction - air_drag

        acceleration = net_force / mass 

        velocity += acceleration * time_step_seconds
        distance += velocity * time_step_seconds
        
    return distance
--------------------------------------------------
TASK 3:
#Define a function to simulate car dynamics with various parameters
def simulate_car_dynamics(engine_force,
                          time=1.0,               # Total simulation time in seconds (default 1.0)
                          mass=1750,               # Vehicle mass in kg (typical sedan weight)
                          rolling_resistance_coefficient=0.02,  # Coefficient for rolling resistance
                          air_density=1.225,       # Air density in kg/m³ (at sea level)
                          drag_coefficient=0.3,    # Aerodynamic drag coefficient
                          frontal_area_of_the_car=2.3):  # Frontal area in m²
    
    #Physical constants
    gravity = 9.81  # Acceleration due to gravity in m/s²
    time_step_seconds = 0.01  # Simulation time step in seconds (small for accuracy)
    steps = int(time / time_step_seconds)  # Calculate total number of simulation steps
    
    #Initialize simulation variables
    velocity = 0.0  # Starting velocity (at rest)
    distance = 0.0  # Starting distance (zero)
    
    #Lists to store results for plotting
    time_list = []
    velocity_list = []
    distance_list = []
    
    #Main simulation loop
    for step in range(steps):
        current_time_in_seconds = step * time_step_seconds  # Calculate current time
        
        #Calculate friction force (rolling resistance)
        f_friction = rolling_resistance_coefficient * mass * gravity
        # Calculate air drag force (proportional to velocity squared)
        air_drag = 0.5 * air_density * drag_coefficient * frontal_area_of_the_car * (velocity ** 2)
        
        #Calculate net force acting on the car
        net_force = engine_force - f_friction - air_drag
        # Calculate acceleration using Newton's second law (F=ma)
        acceleration = net_force / mass
        
        #Update velocity using Euler integration
        velocity += acceleration * time_step_seconds
        # Update distance using Euler integration
        distance += velocity * time_step_seconds
        
        #Store current values for plotting
        time_list.append(current_time_in_seconds)
        velocity_list.append(velocity)
        distance_list.append(distance)
    
    #Return the collected data
    return time_list, velocity_list, distance_list

#Simulate car dynamics with 4000 N engine force for 10 seconds
time_vals, vel_vals, dist_vals = simulate_car_dynamics(engine_force=4000, time=100)

#Create a figure for plotting with specified size (12x6 inches)
plt.figure(figsize=(12, 6))

#First subplot (left side) for velocity
plt.subplot(1, 2, 1)  # 1 row, 2 columns, first plot
plt.plot(time_vals, vel_vals, label='Velocity (m/s)', color='blue')
plt.title('Car Velocity Over Time')  # Set title
plt.xlabel('Time (s)')  # X-axis label
plt.ylabel('Velocity (m/s)')  # Y-axis label
plt.grid(True)  # Enable grid for better readability

#Second subplot (right side) for distance
plt.subplot(1, 2, 2)  # 1 row, 2 columns, second plot
plt.plot(time_vals, dist_vals, label='Distance (m)', color='green')
plt.title('Car Distance Over Time')
plt.xlabel('Time (s)')
plt.ylabel('Distance (m)')
plt.grid(True)

#Adjust layout to prevent overlapping elements
plt.tight_layout()
#Display the plot
plt.show()
-----------------------------------------------
TASK 4:
###### Load car data
car_data = pd.read_csv('cleaned_car_data.csv')

# Identify the most powerful car
most_powerful_car = car_data.loc[car_data['Horsepower'].idxmax()]
print("Most Powerful Car Info:")
for column, value in most_powerful_car.items():
    print(f"{column}: {value}")

# Physics constants
car_mass_kg = 1750
gravity_m_s2 = 9.81
rolling_resistance_coeff = 0.02
air_density_kg_m3 = 1.225
drag_coefficient = 0.3
frontal_area_m2 = 2.3
time_step_sec = 0.1
total_time_seconds = 60

# Convert horsepower to watts
engine_power_hp = most_powerful_car['Horsepower']
engine_power_watts = engine_power_hp * 745.7

# Simulation initialization
velocity = 0.1  # Small initial velocity
distance = 0.0
velocity_points = []
distance_points = []
time_points = []

for step in range(int(total_time_seconds / time_step_sec) + 1):
    current_time = step * time_step_sec
    
    # Calculate forces
    rolling_resistance_force = rolling_resistance_coeff * car_mass_kg * gravity_m_s2
    drag_force = 0.5 * air_density_kg_m3 * drag_coefficient * frontal_area_m2 * (velocity ** 2)
    
    # Engine force cannot exceed maximum available force at low speeds
    max_engine_force = engine_power_watts / max(velocity, 1.0)  # Prevent infinite force at v→0
    engine_force = min(max_engine_force, 20000)  # Arbitrary upper limit for realism
    
    net_force = engine_force - rolling_resistance_force - drag_force
    acceleration = net_force / car_mass_kg

    # Update motion
    new_velocity = velocity + acceleration * time_step_sec
    if new_velocity < 0:
        new_velocity = 0.0
    
    distance += new_velocity * time_step_sec
    velocity = new_velocity

    # Store results
    velocity_points.append(velocity)
    distance_points.append(distance)
    time_points.append(current_time)

    # Early termination
    if step > 100 and abs(velocity_points[-1] - velocity_points[-2]) < 0.001:
        break

max_speed_mps = velocity_points[-1]

# Report results
print(f"\nMaximum Speed Achieved: {max_speed_mps:.2f} m/s ({max_speed_mps * 3.6:.2f} km/h)")
--------------------------------------------------------------
TASK 5:
# Plot velocity over time
plt.figure(figsize=(10, 6))
plt.plot(time_points, velocity_points, label='Velocity (m/s)', color='blue')
plt.axhline(26.82, color='gray', linestyle='--', label='60 mph (26.82 m/s)')
plt.title('Velocity Over Time Until Max Speed')
plt.xlabel('Time (seconds)')
plt.ylabel('Speed (m/s)')
plt.grid(True)
plt.legend()
plt.show()
--------------------------------------------
TASK 6: 
def stopping_distance(current_speed_mps,
                                braking_force_N,
                                mass_kg=1750, 
                              friction_coefficient=0.7,
                                reaction_time=1.0):
    
    #Calculate reaction distance (distance traveled during driver reaction time)
    reaction_distance = current_speed_mps * reaction_time
    
    #Calculate maximum possible deceleration
    max_deceleration = friction_coefficient * 9.81  # a = μ * g
    
    #Calculate actual deceleration from brakes (a = F/m)
    brake_deceleration = braking_force_N / mass_kg

    #Use the smaller deceleration
    effective_deceleration = min(brake_deceleration, max_deceleration)
    
    #Calculate braking distance (v^2 = u^2 + 2as REARRANGE TO s = u^2 /2a)
    braking_distance = (current_speed_mps ** 2) / (2 * effective_deceleration)
    
    #Total stopping distance
    total_distance = reaction_distance + braking_distance
    
    return {
        'reaction_distance_m': reaction_distance,
        'braking_distance_m': braking_distance,
        'total_stopping_distance_m': total_distance,
        'deceleration_mps2': effective_deceleration,
        'stopping_time_s': reaction_time + (current_speed_mps / effective_deceleration)
    }
------------------------------------------------------
TASK 7:
# Load car data
car_data = pd.read_csv('cleaned_car_data.csv')

# Identify the most powerful car
most_powerful_car = car_data.loc[car_data['Horsepower'].idxmax()]
print("Most Powerful Car Info:")
for column, value in most_powerful_car.items():
    print(f"{column}: {value}")

# Physics constants
car_mass_kg = 1750
gravity_m_s2 = 9.81
rolling_resistance_coeff = 0.02
air_density_kg_m3 = 1.225
drag_coefficient = 0.3
frontal_area_m2 = 2.3
time_step_sec = 0.1
total_time_seconds = 60

# Convert horsepower to watts
engine_power_hp = most_powerful_car['Horsepower']
engine_power_watts = engine_power_hp * 745.7

# Simulation initialization
velocity = 0.1  # Small initial velocity to avoid divide-by-zero
distance = 0.0
velocity_points = []
distance_points = []
time_points = []

# Acceleration simulation
for step in range(int(total_time_seconds / time_step_sec) + 1):
    current_time = step * time_step_sec

    # Resistive forces
    rolling_resistance_force = rolling_resistance_coeff * car_mass_kg * gravity_m_s2
    drag_force = 0.5 * air_density_kg_m3 * drag_coefficient * frontal_area_m2 * velocity**2
    
    # Engine force
    max_engine_force = engine_power_watts / max(velocity, 1.0)  # limit at low speed
    engine_force = min(max_engine_force, 20000)  # cap for realism

    # Net force and acceleration
    net_force = engine_force - rolling_resistance_force - drag_force
    acceleration = net_force / car_mass_kg

    # Update velocity and distance
    new_velocity = max(velocity + acceleration * time_step_sec, 0)
    distance += new_velocity * time_step_sec
    velocity = new_velocity

    # Store data
    velocity_points.append(velocity)
    distance_points.append(distance)
    time_points.append(current_time)

    # Early termination if speed plateaus
    if step > 100 and abs(velocity_points[-1] - velocity_points[-2]) < 0.001:
        break

# Maximum speed and acceleration distance
max_speed_mps = velocity_points[-1]
accel_distance = distance_points[-1]

# Braking distance with 1kN brake force
def calculate_braking_distance(speed, brake_force_newtons=1000):
    deceleration = brake_force_newtons / car_mass_kg
    return (speed ** 2) / (2 * deceleration)

braking_distance = calculate_braking_distance(max_speed_mps)

# Total track length
total_track_length = accel_distance + braking_distance

# Display results
print(f"\nDRAG RACE TRACK REQUIREMENTS (1kN braking force):")
print(f"Acceleration phase: {accel_distance:.1f} m to {max_speed_mps * 3.6:.1f} km/h")
print(f"Braking distance: {braking_distance:.1f} m")
print(f"MINIMUM TRACK LENGTH REQUIRED: {total_track_length:.1f} m")

# Visualization
plt.figure(figsize=(10, 5))
plt.plot(time_points, velocity_points, label='Speed (m/s)', color='blue', linewidth=2)
plt.axhline(max_speed_mps, color='red', linestyle='--', label=f'Max Speed: {max_speed_mps*3.6:.1f} km/h')
plt.xlabel('Time (s)')
plt.ylabel('Speed (m/s)')
plt.title('Drag Race Speed Profile (Acceleration Phase Only)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
